# -*- coding: utf-8 -*-
"""Customer Churn Prediction Machine Learning Model with Decision Trees.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LSdIHbIpnltwKNAlmCtKubtVgCJ9QhGr
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report
import matplotlib.pyplot as plt

data = pd.read_csv('customer_churn.csv')

data = pd.get_dummies(data)

X = data.drop('Churn_Yes', axis=1)
y = data['Churn_Yes']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

clf = DecisionTreeClassifier(max_depth=5, min_samples_leaf=10, random_state=42)

clf.fit(X_train, y_train)

y_pred = clf.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

feature_importance = clf.feature_importances_
sorted_indices = np.argsort(feature_importance)[::-1]
print("Feature Importance:")
for i in sorted_indices:
    print(X.columns[i], ":", feature_importance[i])

rf_clf = RandomForestClassifier(n_estimators=100, random_state=42)
rf_clf.fit(X_train, y_train)
rf_accuracy = accuracy_score(y_test, rf_clf.predict(X_test))
print("Random Forest Accuracy:", rf_accuracy)

lr_clf = LogisticRegression(max_iter=1000, random_state=42)
lr_clf.fit(X_train, y_train)
lr_accuracy = accuracy_score(y_test, lr_clf.predict(X_test))
print("Logistic Regression Accuracy:", lr_accuracy)

cv_scores = cross_val_score(clf, X, y, cv=5)
print("Cross-Validation Scores:", cv_scores)
print("Mean CV Accuracy:", np.mean(cv_scores))

plt.figure(figsize=(12, 8))
plot_tree(clf, filled=True, feature_names=X.columns, class_names=['No Churn', 'Churn'])
plt.show()

print("Classification Report:")
print(classification_report(y_test, y_pred))

churn_counts = data['Churn_Yes'].value_counts()
plt.figure(figsize=(10, 10))
plt.pie(churn_counts, labels=['No Churn', 'Churn'], autopct='%1.1f%%', startangle=140)
plt.title('Churn Distribution')
plt.show()

plt.figure(figsize=(12, 8))
pd.plotting.scatter_matrix(data.select_dtypes(include=['float64', 'int64']), diagonal='kde', alpha=0.5)
plt.suptitle('Pairplot of Numerical Features', y=1.02)
plt.show()